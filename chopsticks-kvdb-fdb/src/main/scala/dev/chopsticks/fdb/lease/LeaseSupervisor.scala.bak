package dev.chopsticks.fdb.lease

import akka.NotUsed
import akka.stream.OverflowStrategy
import akka.stream.scaladsl.{Keep, Source}
import com.apple.foundationdb.{ReadTransaction, Transaction}
import dev.chopsticks.fp.akka_env.AkkaEnv
import dev.chopsticks.fp.iz_logging.{IzLogging, LogCtx}
import dev.chopsticks.fp.util.TaskUtils
import dev.chopsticks.fp.zio_ext._
import dev.chopsticks.kvdb.ColumnFamily
import dev.chopsticks.kvdb.KvdbWriteTransactionBuilder.TransactionWrite
import dev.chopsticks.kvdb.api.KvdbDatabaseApi
import dev.chopsticks.kvdb.codec.KeyConstraints
import dev.chopsticks.kvdb.fdb.{FdbDatabase, FdbReadApi}
import dev.chopsticks.kvdb.util.KvdbException.ConditionalTransactionFailedException
import eu.timepit.refined.types.all.{NonNegInt, PosInt}
import izumi.reflect.{Tag, TagKK}
import zio.clock.Clock
import zio.{Has, Promise, RIO, Ref, Task, UIO, URLayer, ZIO, ZManaged}

import java.time.Instant
import java.util.UUID
import java.util.concurrent.CompletableFuture
import scala.collection.immutable.ArraySeq
import scala.concurrent.duration._
import scala.math.Ordered.orderingToOrdered

object LeaseSupervisor {

  final case class LeaseSupervisorConfig(
    partitionCount: PosInt,
    replicaCount: PosInt,
    replicaIndex: NonNegInt,
    refreshInterval: FiniteDuration,
    expirationDuration: FiniteDuration
  ) {
    require(
      replicaCount.value <= partitionCount.value,
      s"replicaCount of $replicaCount is greater than partitionCount of $partitionCount"
    )
    require(
      replicaIndex.value < replicaCount.value,
      s"replicaIndex of $replicaIndex is not smaller than replicaCount of $replicaCount"
    )

    lazy val ownPartitions: Set[Int] = {
      val perReplicaCount = math.round(partitionCount.value.toDouble / replicaCount.value).toInt
      val start = replicaIndex.value * perReplicaCount
      val end = if (replicaIndex.value == replicaCount.value - 1) partitionCount.value else start + perReplicaCount
      (start until end).toSet
    }
  }

  final case class LeaseSessionChange(newSessions: Seq[LeaseSession], snapshot: Seq[LeaseSession])

  final case class LeaseSession(lease: Lease, expirationSignal: Task[Unit])

  // expirationSignal is cached, so that can multiple calls to `toClientSession` return the same result
  final case class LeaseSupervisorSession(
    lease: Lease,
    expirationPromise: Promise[Nothing, Unit],
    expirationSignal: Task[Unit]
  ) {
    def toClientSession: LeaseSession = LeaseSession(lease, expirationSignal)
    def withRefreshedAt(newRefreshedAt: Instant): LeaseSupervisorSession =
      copy(lease = lease.withRefreshedAt(newRefreshedAt))
  }

  trait Service[A <: ColumnFamily[LeaseKey, Lease]] {
    // it can only be materialized once, maybe it should be ZManaged instead?
    def acquireLeases(implicit logCtx: LogCtx): Source[LeaseSessionChange, NotUsed]
    def activeLeases: UIO[Seq[LeaseSession]]
    def partitionCount: PosInt
    def ownPartitions: Set[Int]
    def transact(lease: Lease, actions: Seq[TransactionWrite]): RIO[IzLogging with Clock, Seq[TransactionWrite]]
  }

  sealed private[chopsticks] trait LeaseSupervisorCommand
  private[chopsticks] case object MaintainLeases extends LeaseSupervisorCommand
  final private[chopsticks] case class HandleExpiredLease(lease: Lease) extends LeaseSupervisorCommand

  def live[A <: BCF[LeaseKey, Lease]: Tag, BCF[K, V] <: ColumnFamily[K, V]: TagKK](
    config: LeaseSupervisorConfig,
    fdb: FdbDatabase[BCF, _],
    leaseKeyspace: A
  ): URLayer[AkkaEnv with IzLogging with Clock with Has[KvdbDatabaseApi[BCF]], Has[Service[A]]] = {
    val managed = for {
      systemSvc <- ZManaged.access[AkkaEnv](_.get)
      clock <- ZManaged.access[Clock](_.get)
      dbApi <- ZManaged.access[Has[KvdbDatabaseApi[BCF]]](_.get)
      runtime <- ZIO.runtime[AkkaEnv with IzLogging].toManaged_
      currentLeases <- Ref.make(ArraySeq.empty[LeaseSupervisorSession]).toManaged { sessionsRef =>
        val io = for {
          sessions <- sessionsRef.get
          _ <- ZIO.foreach(sessions)(_.expirationPromise.completeWith(ZIO.unit))
          _ <- {
            TaskUtils
              .fromCancellableCompletableFuture {
                fdb.dbContext.db.runAsync { tx =>
                  getAllLeases(tx, fdb, leaseKeyspace, config).thenApply { leases =>
                    val (thisReplicaLeases, otherLeases) =
                      leases.iterator.partition(l => l.owner.contains(config.replicaIndex))
                    val waitingFor = otherLeases
                      .filter(l => config.ownPartitions.contains(l.partitionNumber) && l.assigneeWaitingFrom.nonEmpty)
                    thisReplicaLeases.foreach(lease => set(tx, lease.copy(owner = None), fdb, leaseKeyspace))
                    waitingFor.foreach(lease => set(tx, lease.copy(assigneeWaitingFrom = None), fdb, leaseKeyspace))
                  }
                }
              }
              .orElseSucceed(())
          }
        } yield ()
        io.log(s"[${implicitly[Tag[A]].tag.shortName}] Removing all leases belonging to the replica from FDB")
      }
    } yield {
      new Service[A] {
        import dev.chopsticks.stream.ZAkkaStreams.ops._
        import systemSvc.actorSystem

        implicit val r = runtime

        val (queue, sourceFromQueue) =
          Source
            .queue[LeaseSupervisorCommand](bufferSize = 16, OverflowStrategy.backpressure)
            .preMaterialize()

        override def partitionCount = config.partitionCount
        override def ownPartitions = config.ownPartitions
        override def activeLeases = currentLeases.get.map(_.map(_.toClientSession))

        override def acquireLeases(implicit logCtx: LogCtx) = {
          Source
            // todo add some randomness?
            .tick(0.millis, config.refreshInterval, MaintainLeases)
            .conflate(Keep.right)
            .merge(sourceFromQueue)
            .effectMapAsync(1) {
              case MaintainLeases =>
                maintainLeases
              case HandleExpiredLease(lease) =>
                updateLocalState(toDelete = List(lease), List.empty, List.empty)
            }
            .mapMaterializedValue(_ => NotUsed)
        }

        // returns new sessions
        private def maintainLeases: Task[LeaseSessionChange] = {
          for {
            now <- clock.currentDateTime.map(_.toInstant)
            (refreshed, acquired, freed) <- {
              TaskUtils.fromCancellableCompletableFuture {
                fdb.dbContext.db.runAsync { tx =>
                  val futureLeases = getAllLeases(tx, fdb, leaseKeyspace, config)
                  futureLeases.thenApply { leases =>
                    val refreshed = refreshLeases(tx, now, leases)
                    val acquired = acquireNewLeases(tx, now, leases)
                    val _ = markAssignedPartitionsAsPending(tx, now, leases, acquired, refreshed)
                    val freed = vacantLeasesOtherReplicasAreWaitingFor(tx, now, leases)
                    (refreshed, acquired, freed)
                  }
                }
              }
            }
            sessionChange <- updateLocalState(toDelete = freed, toAdd = acquired, updated = refreshed)
          } yield sessionChange
        }

        private def refreshLeases(tx: Transaction, now: Instant, allLeases: Seq[Lease]): Seq[Lease] = {
          val toRefresh = allLeases.filter { lease =>
            lease.owner.contains(config.replicaIndex) &&
            !isOtherReplicaWaitingForPartition(lease, now)
          }
          val refreshed = toRefresh.map(_.withRefreshedAt(now))
          refreshed.foreach(lease => set(tx, lease, fdb, leaseKeyspace))
          refreshed
        }

        private def vacantLeasesOtherReplicasAreWaitingFor(
          tx: Transaction,
          now: Instant,
          allLeases: Seq[Lease]
        ): Seq[Lease] = {
          val toVacant = allLeases.filter { lease =>
            lease.owner.contains(config.replicaIndex) &&
            isOtherReplicaWaitingForPartition(lease, now)
          }
          val freed = toVacant.map(_.copy(owner = None))
          freed.foreach(lease => set(tx, lease, fdb, leaseKeyspace))
          freed
        }

        private def acquireNewLeases(tx: Transaction, now: Instant, allLeases: Seq[Lease]): Seq[Lease] = {
          val toAcquire =
            allLeases
              .iterator
              .filter { lease =>
                !lease.owner.contains(config.replicaIndex) &&
                !isOtherReplicaWaitingForPartition(lease, now) &&
                isLeaseExpired(lease, now)
              }
              .map(_.partitionNumber)
          val availablePartitions =
            (0 until config.partitionCount.value).toSet -- allLeases.iterator.map(_.partitionNumber).toSet
          val acquiredLeases = (toAcquire ++ availablePartitions)
            .map { partition =>
              Lease(
                partition,
                owner = Some(config.replicaIndex),
                refreshedAt = now,
                assigneeWaitingFrom = Option.empty,
                acquisitionId = UUID.randomUUID()
              )
            }
            .toSeq
          acquiredLeases.foreach(lease => set(tx, lease, fdb, leaseKeyspace))
          acquiredLeases
        }

        private def markAssignedPartitionsAsPending(
          tx: Transaction,
          now: Instant,
          currentLeases: Seq[Lease],
          acquired: Seq[Lease],
          refreshed: Seq[Lease]
        ): Seq[Lease] = {
          val toMark = config.ownPartitions -- (acquired.iterator ++ refreshed.iterator).map(_.partitionNumber)
          val marked = currentLeases
            .flatMap { lease =>
              if (!toMark.contains(lease.partitionNumber)) None
              else Some(lease.copy(assigneeWaitingFrom = Some(now)))
            }
          marked.foreach(lease => set(tx, lease, fdb, leaseKeyspace))
          marked
        }

        private def updateLocalState(
          toDelete: Seq[Lease],
          toAdd: Seq[Lease],
          updated: Seq[Lease]
        ): UIO[LeaseSessionChange] = {
          def makeSession(lease: Lease): UIO[LeaseSupervisorSession] =
            Promise.make[Nothing, Unit].map(p => LeaseSupervisorSession(lease, p, p.await))

          for {
            newSessions <- ZIO.foreach(toAdd)(makeSession)
            // in case session got expired in the meantime
            updatedSessions <- ZIO.foreach(updated)(makeSession)
            res <- {
              val result: UIO[(Seq[LeaseSupervisorSession], Seq[LeaseSupervisorSession], Seq[LeaseSupervisorSession])] =
                currentLeases.modify {
                  existing =>
                    val accumulator =
                      existing.iterator.map(l => l.lease.acquisitionId -> l).to(scala.collection.mutable.Map)
                    val deleted = toDelete.flatMap(l => accumulator.remove(l.acquisitionId))
                    newSessions.foreach(s => accumulator.put(s.lease.acquisitionId, s))
                    val toRecreate = updatedSessions.flatMap { l =>
                      // if updated lease doesn't exist in the local state it means that it was removed in the meantime
                      // (it can happen when lease was not refreshed for a long time),
                      // in that case create a new session with this lease
                      accumulator.get(l.lease.acquisitionId) match {
                        case Some(session) =>
                          val _ = accumulator.put(l.lease.acquisitionId, session.copy(lease = l.lease))
                          None
                        case None =>
                          val _ = accumulator.put(l.lease.acquisitionId, l)
                          Some(l)
                      }
                    }
                    val newState = accumulator.values.to(ArraySeq)
                    val addedSessions = toRecreate ++ newSessions
                    ((addedSessions, deleted, newState), newState)
                }
              result
            }
            (addedSessions, deleted, newState) = res
            _ <- ZIO.foreach(deleted)(session => session.expirationPromise.completeWith(ZIO.unit))
          } yield {
            LeaseSessionChange(
              newSessions = addedSessions.map(_.toClientSession),
              snapshot = newState.map(_.toClientSession)
            )
          }
        }

        override def transact(lease: Lease, actions: Seq[TransactionWrite]) = {
          val reads =
            dbApi
              .readTransactionBuilder
              .get(column = leaseKeyspace, key = LeaseKey(lease.partitionNumber))
              .result
          dbApi
            .conditionallyTransact(
              reads = reads,
              condition = xs => shouldTransactionRun(lease, xs.headOption.flatten),
              actions = actions
            )
            .tapError {
              case _: ConditionalTransactionFailedException =>
                Task.fromFuture(_ => queue.offer(HandleExpiredLease(lease))).unit
              case _ =>
                ZIO.unit
            }
        }

        private def shouldTransactionRun(
          lease: Lease,
          readLease: Option[(Array[Byte], Array[Byte])]
        ): Boolean = {
          readLease
            .map {
              case (_, rawValue) =>
                leaseKeyspace.deserializeValue(rawValue)
            }
            .collect { case Right(v) => v }
            .exists { leaseFromDb =>
              leaseFromDb.owner.contains(config.replicaIndex) &&
              lease.owner == leaseFromDb.owner &&
              lease.acquisitionId == leaseFromDb.acquisitionId
            }
        }

        private def isLeaseExpired(lease: Lease, now: Instant): Boolean = {
          lease.owner.isEmpty || now.minusMillis(config.expirationDuration.toMillis) > lease.refreshedAt
        }

        private def isOtherReplicaWaitingForPartition(lease: Lease, now: Instant): Boolean = {
          !config.ownPartitions.contains(lease.partitionNumber) &&
          lease.assigneeWaitingFrom.exists(_ >= now.minusMillis(config.expirationDuration.toMillis))
        }
      }
    }
    managed.toLayer
  }

  private def getAllLeases[A <: BCF[LeaseKey, Lease], BCF[K, V] <: ColumnFamily[K, V]](
    tx: ReadTransaction,
    fdb: FdbDatabase[BCF, _],
    leaseKeyspace: A,
    config: LeaseSupervisorConfig
  ): CompletableFuture[Seq[Lease]] = {
    val rangeConstraint =
      KeyConstraints.range[LeaseKey](_.first, _.last, config.partitionCount.value)(leaseKeyspace.keySerdes)
    val api = new FdbReadApi[BCF](tx, fdb.dbContext)
    api
      .getRange(leaseKeyspace, rangeConstraint)
      .thenApply { xs =>
        xs
          .iterator
          .map { case (_, v) => leaseKeyspace.deserializeValue(v) }
          .collect { case Right(lease) => lease }
          .toSeq
      }
  }

  private def set[A <: BCF[LeaseKey, Lease], BCF[K, V] <: ColumnFamily[K, V]](
    tx: Transaction,
    lease: Lease,
    fdb: FdbDatabase[BCF, _],
    leaseKeyspace: A
  ): Unit = {
    val rawKey = fdb.dbContext.prefixKey(leaseKeyspace, leaseKeyspace.serializeKey(LeaseKey(lease)))
    val rawValue = leaseKeyspace.serializeValue(lease)
    tx.set(rawKey, rawValue)
  }

}
